#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

#define MAX_NODES 100

int graph[MAX_NODES][MAX_NODES];
int visited[MAX_NODES];
int queue[MAX_NODES];
int front = 0, rear = -1;

void enqueue(int node) {
    queue[++rear] = node;
}

int dequeue() {
    return queue[front++];
}

int isQueueEmpty() {
    return front > rear;
}

void parallelBFS(int start, int n) {
    enqueue(start);
    visited[start] = 1;

    while (!isQueueEmpty()) {
        int currentSize = rear - front + 1;

        #pragma omp parallel for shared(queue, graph, visited, currentSize)
        for (int i = 0; i < currentSize; i++) {
            int node;

            #pragma omp critical
            {
                node = dequeue();
                printf("Visited %d by thread %d\n", node, omp_get_thread_num());
            }

            for (int j = 0; j < n; j++) {
                if (graph[node][j] && !visited[j]) {
                    #pragma omp critical
                    {
                        if (!visited[j]) {
                            visited[j] = 1;
                            enqueue(j);
                        }
                    }
                }
            }
        }
    }
}

void dfsTask(int node, int n) {
    int shouldProceed = 0;

    #pragma omp critical
    {
        if (!visited[node]) {
            visited[node] = 1;
            printf("Visited %d by thread %d\n", node, omp_get_thread_num());
            shouldProceed = 1;
        }
    }

    if (!shouldProceed) return;

    for (int i = 0; i < n; i++) {
        if (graph[node][i]) {
            #pragma omp task
            dfsTask(i, n);
        }
    }

    #pragma omp taskwait
}

void parallelDFS(int start, int n) {
    #pragma omp parallel
    {
        #pragma omp single
        {
            dfsTask(start, n);
        }
    }
}

int main() {
    int n = 6;

    int adjacencyMatrix[6][6] = {
        {0, 1, 1, 0, 0, 0},
        {1, 0, 0, 1, 1, 0},
        {1, 0, 0, 0, 1, 0},
        {0, 1, 0, 0, 0, 1},
        {0, 1, 1, 0, 0, 1},
        {0, 0, 0, 1, 1, 0}
    };

    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            graph[i][j] = adjacencyMatrix[i][j];

    printf("Parallel BFS:\n");
    for (int i = 0; i < n; i++) visited[i] = 0;
    front = 0, rear = -1;
    parallelBFS(0, n);

    printf("\nParallel DFS:\n");
    for (int i = 0; i < n; i++) visited[i] = 0;
    parallelDFS(0, n);

    return 0;
}

//

sudo apt update
sudo apt install build-essential
gedit bfsdfs.c
gcc -fopenmp bfsdfs.c -o parallel_bfs_dfs
./parallel_bfs_dfs

